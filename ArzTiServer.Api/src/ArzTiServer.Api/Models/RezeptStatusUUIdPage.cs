/*
 * Webservice ArzTI API
 *
 * Kommunikation des Genossenschafts-Webservers mit den jeweiligen Rechenzentren   Bitte erst den Rezept-Status abfragen, ggf. weiter filtern und dann mit den UUID die Rezeptdaten holen.  Weitere links: - [Systembeschreibung](https://wiki.arz.software/de/Systembeschreibung/ArzTi_Verhalten_API) - [Swagger](./openapi.yaml.txt) - [History](./history.md)   Einzelne Rezepte sind Listen mit einem Element.
 *
 * The version of the OpenAPI document: 1.1.b
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ArzTiServer.Api.Converters;

namespace ArzTiServer.Api.Models
{ 
    /// <summary>
    /// Eine RezeptUUId mit Status
    /// </summary>
    [DataContract]
    public class RezeptStatusUUIdPage : IEquatable<RezeptStatusUUIdPage>
    {
        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [Required]
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<RezeptStatusUUId> Items { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPage
        /// </summary>
        /// <example>0</example>
        [DataMember(Name="currentPage", EmitDefaultValue=true)]
        public int? CurrentPage { get; set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        /// <example>6</example>
        [DataMember(Name="totalPages", EmitDefaultValue=true)]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        /// <example>1</example>
        [DataMember(Name="pageSize", EmitDefaultValue=true)]
        public int? PageSize { get; set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        /// <example>5</example>
        [DataMember(Name="totalCount", EmitDefaultValue=true)]
        public int? TotalCount { get; set; }

        /// <summary>
        /// Gets or Sets HasPrevious
        /// </summary>
        /// <example>true</example>
        [DataMember(Name="hasPrevious", EmitDefaultValue=true)]
        public bool? HasPrevious { get; set; }

        /// <summary>
        /// Gets or Sets HasNext
        /// </summary>
        /// <example>true</example>
        [DataMember(Name="hasNext", EmitDefaultValue=true)]
        public bool? HasNext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RezeptStatusUUIdPage {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  HasPrevious: ").Append(HasPrevious).Append("\n");
            sb.Append("  HasNext: ").Append(HasNext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RezeptStatusUUIdPage)obj);
        }

        /// <summary>
        /// Returns true if RezeptStatusUUIdPage instances are equal
        /// </summary>
        /// <param name="other">Instance of RezeptStatusUUIdPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RezeptStatusUUIdPage other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Items == other.Items ||
                    Items is not null &&
                    other.Items is not null &&
                    Items.SequenceEqual(other.Items)
                ) && 
                (
                    CurrentPage == other.CurrentPage ||
                    
                    CurrentPage.Equals(other.CurrentPage)
                ) && 
                (
                    TotalPages == other.TotalPages ||
                    
                    TotalPages.Equals(other.TotalPages)
                ) && 
                (
                    PageSize == other.PageSize ||
                    
                    PageSize.Equals(other.PageSize)
                ) && 
                (
                    TotalCount == other.TotalCount ||
                    
                    TotalCount.Equals(other.TotalCount)
                ) && 
                (
                    HasPrevious == other.HasPrevious ||
                    
                    HasPrevious.Equals(other.HasPrevious)
                ) && 
                (
                    HasNext == other.HasNext ||
                    
                    HasNext.Equals(other.HasNext)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Items is not null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrentPage.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalPages.GetHashCode();
                    
                    hashCode = hashCode * 59 + PageSize.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasPrevious.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasNext.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RezeptStatusUUIdPage left, RezeptStatusUUIdPage right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RezeptStatusUUIdPage left, RezeptStatusUUIdPage right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
