/*
 * Webservice ArzTI API
 *
 * Kommunikation des Genossenschafts-Webservers mit den jeweiligen Rechenzentren   Bitte erst den Rezept-Status abfragen, ggf. weiter filtern und dann mit den UUID die Rezeptdaten holen.  Weitere links: - [Systembeschreibung](https://wiki.arz.software/de/Systembeschreibung/ArzTi_Verhalten_API) - [Swagger](./openapi.yaml.txt) - [History](./history.md)   Einzelne Rezepte sind Listen mit einem Element.
 *
 * The version of the OpenAPI document: 1.1.b
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ArzTiServer.Api.Converters;

namespace ArzTiServer.Api.Models
{ 
    /// <summary>
    /// die Rezept UUId und der Status des Rezepts
    /// </summary>
    [DataContract]
    public class RezeptStatusUUId : IEquatable<RezeptStatusUUId>
    {
        /// <summary>
        /// Gets or Sets Typ
        /// </summary>
        [Required]
        [DataMember(Name="typ", EmitDefaultValue=true)]
        public RezeptTyp Typ { get; set; }

        /// <summary>
        /// interner Schl端ssel: die Rezept RUID
        /// </summary>
        /// <value>interner Schl端ssel: die Rezept RUID</value>
        /// <example>a32c558d-e9aa-4fd9-b326-9041f7adbed9</example>
        [Required]
        [DataMember(Name="ruid", EmitDefaultValue=false)]
        public string Ruid { get; set; }

        /// <summary>
        /// ApoTi Schl端ssel: die Rezept ID
        /// </summary>
        /// <value>ApoTi Schl端ssel: die Rezept ID</value>
        /// <example>160.000.002.530.097.16</example>
        [DataMember(Name="rezid", EmitDefaultValue=true)]
        public string? Rezid { get; set; }

        /// <summary>
        /// Gets or Sets Apoik
        /// </summary>
        [DataMember(Name="apoik", EmitDefaultValue=true)]
        public string? Apoik { get; set; }

        /// <summary>
        /// Gets or Sets Arzstatus
        /// </summary>
        /// <example>NEU</example>
        [DataMember(Name="arzstatus", EmitDefaultValue=true)]
        public string? Arzstatus { get; set; }

        /// <summary>
        /// Gets or Sets Rezstatus
        /// </summary>
        /// <example>ABRECHENBAR</example>
        [DataMember(Name="rezstatus", EmitDefaultValue=true)]
        public string? Rezstatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RezeptStatusUUId {\n");
            sb.Append("  Typ: ").Append(Typ).Append("\n");
            sb.Append("  Ruid: ").Append(Ruid).Append("\n");
            sb.Append("  Rezid: ").Append(Rezid).Append("\n");
            sb.Append("  Apoik: ").Append(Apoik).Append("\n");
            sb.Append("  Arzstatus: ").Append(Arzstatus).Append("\n");
            sb.Append("  Rezstatus: ").Append(Rezstatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RezeptStatusUUId)obj);
        }

        /// <summary>
        /// Returns true if RezeptStatusUUId instances are equal
        /// </summary>
        /// <param name="other">Instance of RezeptStatusUUId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RezeptStatusUUId other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Typ == other.Typ ||
                    
                    Typ.Equals(other.Typ)
                ) && 
                (
                    Ruid == other.Ruid ||
                    Ruid is not null &&
                    Ruid.Equals(other.Ruid)
                ) && 
                (
                    Rezid == other.Rezid ||
                    Rezid is not null &&
                    Rezid.Equals(other.Rezid)
                ) && 
                (
                    Apoik == other.Apoik ||
                    Apoik is not null &&
                    Apoik.Equals(other.Apoik)
                ) && 
                (
                    Arzstatus == other.Arzstatus ||
                    Arzstatus is not null &&
                    Arzstatus.Equals(other.Arzstatus)
                ) && 
                (
                    Rezstatus == other.Rezstatus ||
                    Rezstatus is not null &&
                    Rezstatus.Equals(other.Rezstatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Typ.GetHashCode();
                    if (Ruid is not null)
                    hashCode = hashCode * 59 + Ruid.GetHashCode();
                    if (Rezid is not null)
                    hashCode = hashCode * 59 + Rezid.GetHashCode();
                    if (Apoik is not null)
                    hashCode = hashCode * 59 + Apoik.GetHashCode();
                    if (Arzstatus is not null)
                    hashCode = hashCode * 59 + Arzstatus.GetHashCode();
                    if (Rezstatus is not null)
                    hashCode = hashCode * 59 + Rezstatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RezeptStatusUUId left, RezeptStatusUUId right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RezeptStatusUUId left, RezeptStatusUUId right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
