/*
 * Webservice ArzTI API
 *
 * Kommunikation des Genossenschafts-Webservers mit den jeweiligen Rechenzentren   Bitte erst den Rezept-Status abfragen, ggf. weiter filtern und dann mit den UUID die Rezeptdaten holen.  Weitere links: - [Systembeschreibung](https://wiki.arz.software/de/Systembeschreibung/ArzTi_Verhalten_API) - [Swagger](./openapi.yaml.txt) - [History](./history.md)   Einzelne Rezepte sind Listen mit einem Element.
 *
 * The version of the OpenAPI document: 1.1.b
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ArzTiServer.Api.Converters;

namespace ArzTiServer.Api.Models
{ 
    /// <summary>
    /// Eine ID mit Typ UUID und IST-Status, sowie der neue SOLL-Status
    /// </summary>
    [DataContract]
    public class RezeptStatusUUIdStatusEx : IEquatable<RezeptStatusUUIdStatusEx>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public RezeptStatusUUId? Id { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEx? Status { get; set; }

        /// <summary>
        /// Gets or Sets Abrperiode
        /// </summary>
        /// <example>2023-09-01</example>
        [DataMember(Name="abrperiode", EmitDefaultValue=true)]
        public string? Abrperiode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RezeptStatusUUIdStatusEx {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Abrperiode: ").Append(Abrperiode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RezeptStatusUUIdStatusEx)obj);
        }

        /// <summary>
        /// Returns true if RezeptStatusUUIdStatusEx instances are equal
        /// </summary>
        /// <param name="other">Instance of RezeptStatusUUIdStatusEx to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RezeptStatusUUIdStatusEx other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id is not null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Status == other.Status ||
                    Status is not null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Abrperiode == other.Abrperiode ||
                    Abrperiode is not null &&
                    Abrperiode.Equals(other.Abrperiode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id is not null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Status is not null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Abrperiode is not null)
                    hashCode = hashCode * 59 + Abrperiode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RezeptStatusUUIdStatusEx left, RezeptStatusUUIdStatusEx right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RezeptStatusUUIdStatusEx left, RezeptStatusUUIdStatusEx right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
