/*
 * Webservice ArzTI API
 *
 * Kommunikation des Genossenschafts-Webservers mit den jeweiligen Rechenzentren   Bitte erst den Rezept-Status abfragen, ggf. weiter filtern und dann mit den UUID die Rezeptdaten holen.  Weitere links: - [Systembeschreibung](https://wiki.arz.software/de/Systembeschreibung/ArzTi_Verhalten_API) - [Swagger](./openapi.yaml.txt) - [History](./history.md)   Einzelne Rezepte sind Listen mit einem Element.
 *
 * The version of the OpenAPI document: 1.1.b
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ArzTiServer.Api.Attributes;
using ArzTiServer.Api.Models;

namespace ArzTiServer.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class RezeptStatusApiController : ControllerBase
    { 
        /// <summary>
        /// Statusabfrage aller Rezepte mit Filter
        /// </summary>
        /// <remarks>get Rezept Status</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="reztyp">.</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM-TT, YYYY-MM oder YYYY</param>
        /// <param name="maxnum">maximale Anzahl der Datensätze, die zurückgegeben werden</param>
        /// <param name="rezstatus">Wurde das Rezept bereits verarbeitet [ABRECHENBAR, ....]</param>
        /// <param name="arzstatus">Wurde das Rezept bereits abgeholt [NEU,ABGEHOLT]</param>
        /// <param name="startindex">Start index for paging</param>
        /// <param name="pagelength">Number of records to return</param>
        /// <response code="200">Liefert eine Liste der Status aller Rezepte</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="413">Unauthorized</response>
        [HttpGet]
        [Route("/v1/rezept/status")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<RezeptStatus>))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        [ProducesResponseType(statusCode: 413, type: typeof(Error))]
        public abstract Task<IActionResult> GetRezeptStatus([FromQuery (Name = "apoik")]string? apoik, [FromQuery (Name = "reztyp")]RezeptTyp? reztyp, [FromQuery (Name = "zeitraum")]string? zeitraum, [FromQuery (Name = "maxnum")]int? maxnum, [FromQuery (Name = "rezstatus")]List<RezStatus>? rezstatus, [FromQuery (Name = "arzstatus")]ArzStatus? arzstatus, [FromQuery (Name = "startindex")]decimal? startindex, [FromQuery (Name = "pagelength")]decimal? pagelength);

        /// <summary>
        /// Statusabfrage der Rezepte mit UUID
        /// </summary>
        /// <remarks>get RezeptStatus paged by UUId</remarks>
        /// <param name="reztyp">.</param>
        /// <param name="pageNumber">Start for paging</param>
        /// <param name="pageSize">Number of records to return</param>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="rezstatus">Wurde das Rezept bereits verarbeitet [ABRECHENBAR, ....]</param>
        /// <param name="arzstatus">Wurde das Rezept bereits abgeholt [NEU,ABGEHOLT]</param>
        /// <param name="zeitraum">Welcher Zeitraum im Format YYYY-MM-TT, YYYY-MM oder YYYY</param>
        /// <response code="200">Liefert eine Page mit einer Liste der Status aller Rezepte</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="413">Unauthorized</response>
        [HttpGet]
        [Route("/v1/rezept/statusuuid")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(RezeptStatusUUIdPage))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        [ProducesResponseType(statusCode: 413, type: typeof(Error))]
        public abstract Task<IActionResult> GetRezeptStatusUUId([FromQuery (Name = "reztyp")][Required()]RezeptTyp reztyp, [FromQuery (Name = "pageNumber")][Required()]int pageNumber, [FromQuery (Name = "PageSize")][Required()][Range(1, 999)]int pageSize, [FromQuery (Name = "apoik")]string? apoik, [FromQuery (Name = "rezstatus")]List<RezStatus>? rezstatus, [FromQuery (Name = "arzstatus")]ArzStatus? arzstatus, [FromQuery (Name = "zeitraum")]string? zeitraum);

        /// <summary>
        /// Statusänderung einer Liste von Rezepten
        /// </summary>
        /// <remarks>patchRezeptStatus</remarks>
        /// <param name="rezeptStatus"></param>
        /// <response code="200">Liefert den Status einer Liste von Rezepten</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPatch]
        [Route("/v1/rezept/status")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<RezeptStatus>))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        public abstract Task<IActionResult> PatchRezeptStatus([FromBody]List<RezeptStatus>? rezeptStatus);

        /// <summary>
        /// Statusänderung einer Liste von Rezepten
        /// </summary>
        /// <remarks>Ändert den Abholstatus (arzstatus) und RezeptStatus (rezstatus) mit einer RezeptStatusUUId</remarks>
        /// <param name="rezeptStatusUUIdStatusEx"></param>
        /// <response code="200">Liefert eine Liste mit dem Status einer Liste von RezeptStatusUUId nach der Änderung, Rezepte der IST-Status nicht den erwarteten Werten entsprechen werden nicht geändert. Aber der IST-Status kann weggelassen werden.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPatch]
        [Route("/v1/rezept/statusuuid")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<RezeptStatusUUId>))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        public abstract Task<IActionResult> PatchRezeptStatusUUId([FromBody]List<RezeptStatusUUIdStatusEx>? rezeptStatusUUIdStatusEx);

        /// <summary>
        /// liefert eine Liste von Rezeptstatus
        /// </summary>
        /// <remarks>post a Query to Read the Status</remarks>
        /// <param name="rezeptUUId"></param>
        /// <response code="200">Liefert eine Liste mit den gefundenen Rezepten und deren Status.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="413">Unauthorized</response>
        [HttpPost]
        [Route("/v1/rezept/statusuuid")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<RezeptStatusUUIdStatusInfo>))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        [ProducesResponseType(statusCode: 413, type: typeof(Error))]
        public abstract Task<IActionResult> PostQueryReadStatus([FromBody]List<RezeptUUId> rezeptUUId);

        /// <summary>
        /// liefert eine Liste von Rezeptstatus
        /// </summary>
        /// <remarks>post a Query to Read the Status</remarks>
        /// <param name="rezeptId"></param>
        /// <response code="200">Liefert eine Liste mit den gefundenen Rezepten und deren Status.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="413">Unauthorized</response>
        [HttpPost]
        [Route("/v1/rezept/statusid")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<RezeptStatusUUIdStatusInfo>))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        [ProducesResponseType(statusCode: 413, type: typeof(Error))]
        public abstract Task<IActionResult> PostQueryReadStatusById([FromBody]List<RezeptId> rezeptId);
    }
}
