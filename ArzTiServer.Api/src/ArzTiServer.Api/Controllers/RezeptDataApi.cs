/*
 * Webservice ArzTI API
 *
 * Kommunikation des Genossenschafts-Webservers mit den jeweiligen Rechenzentren   Bitte erst den Rezept-Status abfragen, ggf. weiter filtern und dann mit den UUID die Rezeptdaten holen.  Weitere links: - [Systembeschreibung](https://wiki.arz.software/de/Systembeschreibung/ArzTi_Verhalten_API) - [Swagger](./openapi.yaml.txt) - [History](./history.md)   Einzelne Rezepte sind Listen mit einem Element.
 *
 * The version of the OpenAPI document: 1.1.b
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ArzTiServer.Api.Attributes;
using ArzTiServer.Api.Models;

namespace ArzTiServer.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class RezeptDataApiController : ControllerBase
    { 
        /// <summary>
        /// löscht eine Liste von Rezepten
        /// </summary>
        /// <remarks>postQueryDelete</remarks>
        /// <param name="rezeptId"></param>
        /// <response code="201">Liefert eine Liste mit den gefundenen Rezepten.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="413">Unauthorized</response>
        [HttpPost]
        [Route("/v1/rezept/delete")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(List<Rezept>))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        [ProducesResponseType(statusCode: 413, type: typeof(Error))]
        public abstract Task<IActionResult> PostQueryRezepteDelete([FromBody]List<RezeptId> rezeptId);

        /// <summary>
        /// liefert eine Liste von Rezepten einer Apotheke
        /// </summary>
        /// <remarks>postQueryRead</remarks>
        /// <param name="rezeptId"></param>
        /// <param name="datatype">Wenn der optionale Datentyp bei E-Rezepten gesetzt ist, wird die Dispensionierung direkt zurück gegeben.</param>
        /// <response code="200">Liefert eine Liste mit den gefundenen Rezepten.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="413">Unauthorized</response>
        [HttpPost]
        [Route("/v1/rezept/read")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<Rezept>))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        [ProducesResponseType(statusCode: 413, type: typeof(Error))]
        public abstract Task<IActionResult> PostQueryRezepteRead([FromBody]List<RezeptId> rezeptId, [FromQuery (Name = "datatype")]DataTyp? datatype);

        /// <summary>
        /// liefert eine Liste von Rezepten per UUId
        /// </summary>
        /// <remarks>post a Query to Read Rezepts by UUID</remarks>
        /// <param name="rezeptUUId"></param>
        /// <param name="datatype">Wenn der optionale Datentyp bei E-Rezepten gesetzt ist, wird die Dispensionierung direkt zurück gegeben.</param>
        /// <response code="200">Liefert eine Liste mit den gefundenen Rezepten.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="413">Unauthorized</response>
        [HttpPost]
        [Route("/v1/rezept/readuuid")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<Rezept>))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        [ProducesResponseType(statusCode: 413, type: typeof(Error))]
        public abstract Task<IActionResult> PostQueryRezepteReadUUId([FromBody]List<RezeptUUId> rezeptUUId, [FromQuery (Name = "datatype")]DataTyp? datatype);
    }
}
