/*
 * Webservice ArzTI API
 *
 * Kommunikation des Genossenschafts-Webservers mit den jeweiligen Rechenzentren   Bitte erst den Rezept-Status abfragen, ggf. weiter filtern und dann mit den UUID die Rezeptdaten holen.  Weitere links: - [Systembeschreibung](https://wiki.arz.software/de/Systembeschreibung/ArzTi_Verhalten_API) - [Swagger](./openapi.yaml.txt) - [History](./history.md)   Einzelne Rezepte sind Listen mit einem Element.
 *
 * The version of the OpenAPI document: 1.1.b
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using ArzTiServer.Api.Attributes;
using ArzTiServer.Api.Models;

namespace ArzTiServer.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class ApothekeApiController : ControllerBase
    { 
        /// <summary>
        /// löscht die Apotheke
        /// </summary>
        /// <remarks>deleteApothekeByIK</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <response code="200">Apotheke erfolgreich gelöscht.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/v1/apotheke/{apoik}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        public abstract Task<IActionResult> DeleteApothekeByIK([FromRoute (Name = "apoik")][Required]string apoik);

        /// <summary>
        /// liefert Details einer Apotheke
        /// </summary>
        /// <remarks>getApothekeByIK</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <response code="200">liefert Details einer Apotheke.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke/{apoik}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Apotheke))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        public abstract Task<IActionResult> GetApothekeByIK([FromRoute (Name = "apoik")][Required]string apoik);

        /// <summary>
        /// liefert eine Liste aller Apotheken
        /// </summary>
        /// <remarks>getApothekenList</remarks>
        /// <response code="200">Liefert eine Liste mit den gefundenen Apotheken.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/v1/apotheke")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<Apotheke>))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        public abstract Task<IActionResult> GetApothekenList();

        /// <summary>
        /// ändert die Apotheke
        /// </summary>
        /// <remarks>patchApothekeByIK</remarks>
        /// <param name="apoik">Die Apotheken IK.</param>
        /// <param name="apotheke"></param>
        /// <response code="200">Apotheke erfolgreich gelöscht.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPatch]
        [Route("/v1/apotheke/{apoik}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        [ProducesResponseType(statusCode: 404, type: typeof(Error))]
        public abstract Task<IActionResult> PatchApothekeByIK([FromRoute (Name = "apoik")][Required]string apoik, [FromBody]List<Apotheke> apotheke);

        /// <summary>
        /// erzeugt eine Apotheke
        /// </summary>
        /// <remarks>postApothekeRead</remarks>
        /// <param name="apotheke"></param>
        /// <response code="200">liefert Details einer Apotheke.</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/v1/apotheke")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Apotheke))]
        [ProducesResponseType(statusCode: 401, type: typeof(Error))]
        public abstract Task<IActionResult> PostApothekeRead([FromBody]List<Apotheke> apotheke);
    }
}
